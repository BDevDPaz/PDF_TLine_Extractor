
---

## ⚙️ Configuración y Ejecución (en Replit)

Sigue estos sencillos pasos para poner en marcha la aplicación:

1.  **Bifurca el Proyecto (Fork):** Haz clic en el botón "Fork" si estás viendo esto en Replit para crear tu propia copia editable.

2.  **Configura la Clave de API:**
    *   Ve a la pestaña **"Secrets"** en el panel izquierdo (tiene un icono de un candado 🔒).
    *   Crea un nuevo "secret" con el nombre `GOOGLE_API_KEY`.
    *   En el campo del valor (`value`), pega tu clave de API de Google Gemini.

3.  **Ejecuta la Aplicación:**
    *   Simplemente haz clic en el gran botón verde **"Run"** en la parte superior.
    *   Replit instalará automáticamente todas las dependencias listadas en `pyproject.toml` y luego iniciará el servidor web.

4.  **¡Listo!** La aplicación estará disponible en la ventana del navegador web de Replit.

---

## 🧠 Cómo Funciona el Flujo de Datos

1.  El usuario sube uno o más archivos PDF a través de la interfaz web.
2.  `main.py` recibe los archivos y los guarda en `data/raw/`.
3.  Se llama a `process_pdf_files` en `app/extractors/main_extractor.py`.
4.  El extractor identifica los nombres de los archivos que se están procesando.
5.  **Paso de Integridad:** Se abre una transacción de base de datos. Lo primero que hace es **eliminar únicamente los registros existentes que coincidan con los nombres de los archivos que se están subiendo**.
6.  El texto se extrae de los PDF y los sub-extractores (para llamadas, mensajes, datos) lo analizan con expresiones regulares.
7.  Los datos extraídos se cargan en DataFrames de Pandas para su limpieza y para eliminar duplicados dentro de la carga actual.
8.  Los datos limpios se insertan en la base de datos.
9.  Si todo el proceso tiene éxito, la transacción se confirma (`commit`). Si ocurre algún error en cualquier punto, la transacción se revierte (`rollback`), dejando la base de datos en su estado original.
10. El frontend (en la página del Analizador) utiliza `fetch` para llamar a los endpoints de la API de Flask (`/api/data`, `/api/summary`) y mostrar los datos en los gráficos y la tabla.
EOF
echo "  -> README.md creado."

cat > .replit << 'EOF'
run = "poetry install && python main.py"
language = "python3"
[packager]
language = "python3"
[packager.features]
packageSearch = true
guessImports = true
[env]
GOOGLE_API_KEY = "Pega tu clave de API de Google aquí"
EOF
echo "  -> .replit creado."

cat > pyproject.toml << 'EOF'
[tool.poetry]
name = "pdf-analyzer-app-v3"
version = "3.0.0"
description = "Aplicación web robusta con integridad de datos garantizada para analizar facturas PDF."
authors = ["Coding Partner"]
[tool.poetry.dependencies]
python = ">=3.8"
Flask = "^2.2.0"
SQLAlchemy = "^1.4.0"
pdfplumber = "^0.10.0"
pandas = "^1.5.0"
python-dateutil = "^2.8.0"
google-generativeai = "^0.4.0"
werkzeug = "^2.2.0"
tqdm = "^4.62.0"
[tool.poetry.dev-dependencies]
pytest = "^7.0"
black = "^23.0"
EOF
echo "  -> pyproject.toml creado."
echo "✅ Archivos de configuración y documentación creados."
echo ""

# --- 3. Crear los archivos principales de la aplicación ---
echo "PASO 3: Creando archivos de la aplicación Python..."

# Crear main.py (Controlador principal)
cat > main.py << 'EOF'
import os
from flask import Flask, render_template, request, jsonify, send_from_directory
from app.db.database import init_db
from app.extractors.main_extractor import process_pdf_files
from app.db.queries import get_all_data, get_summary_data, has_data
from app.services.ai_service import generate_ai_content
from werkzeug.utils import secure_filename

app = Flask(__name__, template_folder='app/templates', static_folder='app/static')
app.config['UPLOAD_FOLDER'] = 'data/raw'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
init_db()

@app.route('/')
def index(): return render_template('welcome.html')
@app.route('/timeline_app')
def timeline_app(): return render_template('timeline_app_upload.html')
@app.route('/notes')
def notes_app(): return render_template('notes.html')
@app.route('/viewer')
def viewer_app(): return render_template('viewer.html')

@app.route('/analyzer')
def analyzer_app():
    return render_template('analyzer_empty.html') if not has_data() else render_template('analyzer.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'files[]' not in request.files:
        return jsonify({'error': 'No se encontraron archivos'}), 400
    files = request.files.getlist('files[]')
    if not files or files[0].filename == '':
        return jsonify({'error': 'No se seleccionaron archivos'}), 400
    filepaths = []
    for file in files:
        if file:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            filepaths.append(filepath)
    try:
        counts = process_pdf_files(filepaths)
        total_records = sum(counts.values())
        if total_records == 0:
            message = f"{len(filepaths)} archivo(s) procesado(s), pero no se encontraron datos válidos. Revisa el formato."
            return jsonify({'message': message, 'status': 'warning'}), 200
        message = f'Éxito. {total_records} registros fueron actualizados desde {len(filepaths)} archivo(s).'
        return jsonify({'message': message, 'status': 'success'}), 200
    except Exception as e:
        return jsonify({'error': f'Error crítico durante el procesamiento: {str(e)}'}), 500

@app.route('/api/data')
def get_data(): return jsonify(get_all_data())
@app.route('/api/summary')
def get_summary(): return jsonify(get_summary_data())
@app.route('/uploads/<filename>')
def uploaded_file(filename): return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/api/gemini', methods=['POST'])
def gemini_proxy():
    if not os.getenv("GOOGLE_API_KEY"):
        return jsonify({"error": "La API de IA no está configurada."}), 500
    data = request.json; prompt = data.get('prompt')
    if not prompt: return jsonify({"error": "El prompt es requerido."}), 400
    success, content = generate_ai_content(prompt)
    return jsonify({"text": content}) if success else jsonify({"error": content}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=False)
EOF
echo "  -> main.py creado."

# Crear archivos __init__.py para los módulos
touch app/__init__.py
touch app/extractors/__init__.py
touch app/db/__init__.py
touch app/static/js/__init__.py
touch app/services/__init__.py
echo "  -> Archivos __init__.py creados."

# Crear el servicio de IA
cat > app/services/ai_service.py << 'EOF'
import os
import google.generativeai as genai

def generate_ai_content(prompt: str) -> (bool, str):
    try:
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            return False, "La API de IA no está configurada en el servidor."
            
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        return True, response.text
    except Exception as e:
        return False, f"Error en la API de IA: {str(e)}"
EOF
echo "  -> services/ai_service.py creado."

# Crear el extractor principal con lógica de integridad de datos
cat > app/extractors/main_extractor.py << 'EOF'
import pdfplumber
import pandas as pd
from tqdm import tqdm
import os
from app.db.database import get_db_session
from app.db.models import Call, Message, DataUsage
from .call_extractor import extract_call_data
from .message_extractor import extract_message_data
from .data_usage_extractor import extract_data_usage_data

def process_pdf_files(filepaths: list[str]) -> dict:
    all_calls, all_messages, all_data_usage = [], [], []
    source_filenames = [os.path.basename(fp) for fp in filepaths]

    for filepath in tqdm(filepaths, desc="Extrayendo datos de PDFs"):
        try:
            with pdfplumber.open(filepath) as pdf:
                full_text = "".join([page.extract_text() for page in pdf.pages if page.extract_text()])
                if not full_text: continue
                all_calls.extend(extract_call_data(full_text, filepath))
                all_messages.extend(extract_message_data(full_text, filepath))
                all_data_usage.extend(extract_data_usage_data(full_text, filepath))
        except Exception as e:
            print(f"Error al leer {os.path.basename(filepath)}: {e}")
            raise

    calls_df = pd.DataFrame(all_calls).drop_duplicates().reset_index(drop=True)
    messages_df = pd.DataFrame(all_messages).drop_duplicates().reset_index(drop=True)
    data_usage_df = pd.DataFrame(all_data_usage).drop_duplicates().reset_index(drop=True)

    session = get_db_session()
    try:
        if source_filenames:
            session.query(Call).filter(Call.source_file.in_(source_filenames)).delete(synchronize_session=False)
            session.query(Message).filter(Message.source_file.in_(source_filenames)).delete(synchronize_session=False)
            session.query(DataUsage).filter(DataUsage.source_file.in_(source_filenames)).delete(synchronize_session=False)

        if not calls_df.empty:
            session.bulk_insert_mappings(Call, calls_df.to_dict(orient='records'))
        if not messages_df.empty:
            session.bulk_insert_mappings(Message, messages_df.to_dict(orient='records'))
        if not data_usage_df.empty:
            session.bulk_insert_mappings(DataUsage, data_usage_df.to_dict(orient='records'))
        
        session.commit()
        
        return {
            "calls": len(calls_df),
            "messages": len(messages_df),
            "data_usage": len(data_usage_df)
        }
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()
EOF
echo "  -> extractors/main_extractor.py creado."

# Crear los sub-extractores
cat > app/extractors/call_extractor.py << 'EOF'
import re
from dateutil.parser import parse
import os

def extract_call_data(text, filepath):
    pattern = re.compile(
        r"(Jul|Aug|Jun)\s+(\d{1,2})\s+"
        r"(\d{1,2}:\d{2}\s*(?:AM|PM))\s+"
        r"(IN|OUT)\s+\((.+?)\)\s+"
        r"(.+?)\s+"
        r"([A-Z])?\s+"
        r"(\d+)\n",
        re.MULTILINE
    )
    matches = pattern.finditer(text)
    calls = []
    current_year = "2024"
    for match in matches:
        month, day, time, call_type, phone, desc, type_code, minutes = match.groups()
        try:
            date_str = f"{month} {day}, {current_year} {time}"
            full_date = parse(date_str)
            calls.append({
                "timestamp": full_date,
                "call_type": "Recibida" if call_type == "IN" else "Realizada",
                "phone_number": phone,
                "description": desc.strip(),
                "duration_minutes": int(minutes),
                "source_file": os.path.basename(filepath)
            })
        except (ValueError, TypeError):
            continue
    return calls
EOF
echo "  -> extractors/call_extractor.py creado."

cat > app/extractors/message_extractor.py << 'EOF'
import re
from dateutil.parser import parse
import os

def extract_message_data(text, filepath):
    pattern = re.compile(
        r"(Jul|Aug|Jun)\s+(\d{1,2})\s+"
        r"(\d{1,2}:\d{2}\s*(?:AM|PM))\s+"
        r"(IN|OUT)\s+((?:\(\d{3}\)\s)?\d{3,})\s+"
        r"(.+?)\s+"
        r"(TXT|PIC)\n",
        re.MULTILINE
    )
    matches = pattern.finditer(text)
    messages = []
    current_year = "2024"
    for match in matches:
        month, day, time, msg_type, who, destination, msg_format = match.groups()
        try:
            date_str = f"{month} {day}, {current_year} {time}"
            full_date = parse(date_str)
            messages.append({
                "timestamp": full_date,
                "message_type": "Recibido" if msg_type == "IN" else "Enviado",
                "contact": who.strip(),
                "destination": destination.strip(),
                "format": msg_format,
                "source_file": os.path.basename(filepath)
            })
        except (ValueError, TypeError):
            continue
    return messages
EOF
echo "  -> extractors/message_extractor.py creado."

cat > app/extractors/data_usage_extractor.py << 'EOF'
import re
from dateutil.parser import parse
import os

def extract_data_usage_data(text, filepath):
    pattern = re.compile(
        r"(Jul|Aug|Jun)\s+(\d{1,2})\s+"
        r"Mobile Internet\s+"
        r"([\d,]+\.\d+)\n",
        re.MULTILINE
    )
    matches = pattern.finditer(text)
    data_usage = []
    current_year = "2024"
    for match in matches:
        month, day, mb_used = match.groups()
        try:
            date_str = f"{month} {day}, {current_year}"
            full_date = parse(date_str)
            data_usage.append({
                "date": full_date.date(),
                "mb_used": float(mb_used.replace(',', '')),
                "source_file": os.path.basename(filepath)
            })
        except (ValueError, TypeError):
            continue
    return data_usage
EOF
echo "  -> extractors/data_usage_extractor.py creado."

# Crear los archivos de la base de datos
cat > app/db/database.py << 'EOF'
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
import os

os.makedirs('data', exist_ok=True)
DATABASE_URL = "sqlite:///data/timeline_data.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def init_db():
    from . import models
    Base.metadata.create_all(bind=engine)

def get_db_session():
    return SessionLocal()
EOF
echo "  -> db/database.py creado."

cat > app/db/models.py << 'EOF'
from sqlalchemy import Column, Integer, String, DateTime, Float, Date
from .database import Base

class Call(Base):
    __tablename__ = "calls"
    id = Column(Integer, primary_key=True, index=True)
    timestamp = Column(DateTime, index=True)
    call_type = Column(String)
    phone_number = Column(String, index=True)
    description = Column(String)
    duration_minutes = Column(Integer)
    source_file = Column(String)

class Message(Base):
    __tablename__ = "messages"
    id = Column(Integer, primary_key=True, index=True)
    timestamp = Column(DateTime, index=True)
    message_type = Column(String)
    contact = Column(String, index=True)
    destination = Column(String)
    format = Column(String)
    source_file = Column(String)

class DataUsage(Base):
    __tablename__ = "data_usage"
    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, index=True)
    mb_used = Column(Float)
    source_file = Column(String)
EOF
echo "  -> db/models.py creado."

cat > app/db/queries.py << 'EOF'
from .database import get_db_session
from .models import Call, Message, DataUsage
from sqlalchemy import func
import pandas as pd

def has_data():
    session = get_db_session()
    try:
        return session.query(Call).first() is not None or session.query(Message).first() is not None or session.query(DataUsage).first() is not None
    finally:
        session.close()

def get_all_data():
    session = get_db_session()
    try:
        calls = pd.read_sql(session.query(Call).statement, session.bind).to_dict(orient='records')
        messages = pd.read_sql(session.query(Message).statement, session.bind).to_dict(orient='records')
        data_usage = pd.read_sql(session.query(DataUsage).statement, session.bind).to_dict(orient='records')
        return {"calls": calls, "messages": messages, "data_usage": data_usage}
    finally:
        session.close()

def get_summary_data():
    session = get_db_session()
    try:
        top_calls = session.query(Call.phone_number, func.count(Call.id).label('count')).group_by(Call.phone_number).order_by(func.count(Call.id).desc()).limit(10).all()
        top_messages = session.query(Message.contact, func.count(Message.id).label('count')).group_by(Message.contact).order_by(func.count(Message.id).desc()).limit(10).all()
        return {"top_calls": [{"number": num, "count": count} for num, count in top_calls], "top_messages": [{"contact": contact, "count": count} for contact, count in top_messages]}
    finally:
        session.close()
EOF
echo "  -> db/queries.py creado."
echo "✅ Archivos de la aplicación Python creados."
echo ""

# --- 4. Crear las plantillas HTML ---
echo "PASO 4: Creando plantillas HTML..."

# Crear la plantilla base (layout)
cat > app/templates/layout.html << 'EOF'
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Panel de Herramientas{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .nav-link { transition: all 0.2s ease-in-out; display: flex; align-items: center; gap: 0.5rem; }
        .nav-link.active { background-color: #4f46e5; color: white; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
        .nav-link.active .icon { color: white !important; }
        .icon { color: #4f46e5; }
    </style>
    {% block head %}{% endblock %}
</head>
<body class="bg-gray-50">
    <nav class="bg-white shadow-md sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-3">
                <div class="flex items-center space-x-4">
                    <a href="/" class="text-xl font-bold text-indigo-600 flex items-center gap-2">
                        <i data-lucide="layout-dashboard"></i> Panel
                    </a>
                </div>
                <div class="hidden md:flex items-center space-x-1">
                    <a href="{{ url_for('timeline_app') }}" class="nav-link py-2 px-3 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 {% if 'timeline_app' in request.path %}active{% endif %}"><i data-lucide="upload-cloud" class="icon"></i> Cargar</a>
                    <a href="{{ url_for('analyzer_app') }}" class="nav-link py-2 px-3 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 {% if 'analyzer' in request.path %}active{% endif %}"><i data-lucide="bar-chart-3" class="icon"></i> Analizador</a>
                    <a href="{{ url_for('viewer_app') }}" class="nav-link py-2 px-3 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 {% if 'viewer' in request.path %}active{% endif %}"><i data-lucide="file-text" class="icon"></i> Visor PDF</a>
                    <a href="{{ url_for('notes_app') }}" class="nav-link py-2 px-3 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 {% if 'notes' in request.path %}active{% endif %}"><i data-lucide="pen-square" class="icon"></i> Notas IA</a>
                </div>
                <div class="md:hidden">
                    <button id="mobile-menu-button" class="text-gray-700 hover:text-indigo-600">
                        <i data-lucide="menu"></i>
                    </button>
                </div>
            </div>
        </div>
        <div id="mobile-menu" class="md:hidden hidden bg-white border-t border-gray-200">
            <a href="{{ url_for('timeline_app') }}" class="block nav-link py-3 px-4 text-base font-medium text-gray-700 hover:bg-gray-100 {% if 'timeline_app' in request.path %}active{% endif %}"><i data-lucide="upload-cloud" class="icon"></i> Cargar y Procesar</a>
            <a href="{{ url_for('analyzer_app') }}" class="block nav-link py-3 px-4 text-base font-medium text-gray-700 hover:bg-gray-100 {% if 'analyzer' in request.path %}active{% endif %}"><i data-lucide="bar-chart-3" class="icon"></i> Analizador Interactivo</a>
            <a href="{{ url_for('viewer_app') }}" class="block nav-link py-3 px-4 text-base font-medium text-gray-700 hover:bg-gray-100 {% if 'viewer' in request.path %}active{% endif %}"><i data-lucide="file-text" class="icon"></i> Visor de PDF</a>
            <a href="{{ url_for('notes_app') }}" class="block nav-link py-3 px-4 text-base font-medium text-gray-700 hover:bg-gray-100 {% if 'notes' in request.path %}active{% endif %}"><i data-lucide="pen-square" class="icon"></i> Notas con IA</a>
        </div>
    </nav>
    <main class="p-4 md:p-6">
        {% block content %}{% endblock %}
    </main>
    <script>
        lucide.createIcons();
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        mobileMenuButton.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
        });
    </script>
</body>
</html>
EOF
echo "  -> templates/layout.html creado."

# Crear la página de bienvenida
cat > app/templates/welcome.html << 'EOF'
{% extends "layout.html" %}
{% block title %}Bienvenido{% endblock %}
{% block content %}
<div class="container mx-auto max-w-4xl text-center">
    <div class="bg-white p-10 rounded-xl shadow-lg border border-gray-200">
        <h1 class="text-4xl md:text-5xl font-bold text-indigo-600">Bienvenido al Panel de Herramientas</h1>
        <p class="text-gray-600 mt-4 text-lg">Una aplicación unificada para la extracción y análisis de datos. Selecciona una herramienta para comenzar.</p>
        <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6 text-left">
            <a href="{{ url_for('timeline_app') }}" class="group block p-6 bg-indigo-50 rounded-lg hover:bg-indigo-100 hover:shadow-lg transition-all duration-300">
                <h2 class="font-bold text-xl text-indigo-800 flex items-center gap-2"><i data-lucide="upload-cloud"></i> Cargar y Procesar</h2>
                <p class="text-indigo-700 mt-2">Extrae datos de facturas PDF para el análisis.</p>
            </a>
            <a href="{{ url_for('analyzer_app') }}" class="group block p-6 bg-green-50 rounded-lg hover:bg-green-100 hover:shadow-lg transition-all duration-300">
                <h2 class="font-bold text-xl text-green-800 flex items-center gap-2"><i data-lucide="bar-chart-3"></i> Analizador Interactivo</h2>
                <p class="text-green-700 mt-2">Visualiza los datos extraídos en gráficos y tablas.</p>
            </a>
            <a href="{{ url_for('viewer_app') }}" class="group block p-6 bg-blue-50 rounded-lg hover:bg-blue-100 hover:shadow-lg transition-all duration-300">
                <h2 class="font-bold text-xl text-blue-800 flex items-center gap-2"><i data-lucide="file-text"></i> Visor de PDF</h2>
                <p class="text-blue-700 mt-2">Una herramienta sencilla para ver cualquier PDF.</p>
            </a>
            <a href="{{ url_for('notes_app') }}" class="group block p-6 bg-purple-50 rounded-lg hover:bg-purple-100 hover:shadow-lg transition-all duration-300">
                <h2 class="font-bold text-xl text-purple-800 flex items-center gap-2"><i data-lucide="pen-square"></i> Notas con IA</h2>
                <p class="text-purple-700 mt-2">Toma notas y mejóralas con inteligencia artificial.</p>
            </a>
        </div>
    </div>
</div>
{% endblock %}
EOF
echo "  -> templates/welcome.html creado."

# Crear la página de carga
cat > app/templates/timeline_app_upload.html << 'EOF'
{% extends "layout.html" %}
{% block title %}Cargar y Procesar PDF{% endblock %}
{% block head %}
<style>
.loader { border: 4px solid #f3f3f3; border-top: 4px solid #4f46e5; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; }
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
</style>
{% endblock %}
{% block content %}
<div class="max-w-2xl mx-auto">
    <div class="bg-white p-8 rounded-xl shadow-md border border-gray-200">
        <h1 class="text-3xl font-bold text-gray-800">Actualizar Datos desde PDF</h1>
        <p class="text-gray-600 mt-2">Selecciona los archivos PDF que deseas procesar. Si un archivo ya existe, sus datos antiguos serán reemplazados por los nuevos.</p>
        
        <form id="upload-form" class="mt-6">
            <input type="file" name="files[]" id="file-input" accept=".pdf" required multiple class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 cursor-pointer">
            
            <div id="file-list" class="mt-4 space-y-2"></div>

            <button type="submit" id="submit-button" class="mt-4 w-full bg-indigo-600 text-white py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-400 flex justify-center items-center gap-2">
                <i data-lucide="upload-cloud" id="button-icon"></i>
                <span id="button-text">Cargar y Procesar</span>
                <div id="spinner" class="loader ml-3 hidden"></div>
            </button>
        </form>

        <div id="toast" class="fixed top-5 right-5 text-white py-2 px-4 rounded-lg shadow-lg" style="display:none;"></div>
    </div>
</div>
<script>
    const uploadForm = document.getElementById('upload-form');
    const submitButton = document.getElementById('submit-button');
    const fileInput = document.getElementById('file-input');
    const fileListDiv = document.getElementById('file-list');
    const buttonText = document.getElementById('button-text');
    const buttonIcon = document.getElementById('button-icon');
    const spinner = document.getElementById('spinner');
    const toast = document.getElementById('toast');

    fileInput.addEventListener('change', () => {
        fileListDiv.innerHTML = '';
        if (fileInput.files.length > 0) {
            const list = document.createElement('ul');
            list.className = 'list-disc list-inside text-sm text-gray-600';
            for (const file of fileInput.files) {
                const listItem = document.createElement('li');
                listItem.textContent = file.name;
                list.appendChild(listItem);
            }
            fileListDiv.appendChild(list);
        }
    });

    function showToast(message, status = 'success') {
        toast.textContent = message;
        let bgColor = 'bg-green-500';
        if (status === 'error') bgColor = 'bg-red-500';
        if (status === 'warning') bgColor = 'bg-yellow-500';
        toast.className = `fixed top-5 right-5 text-white py-2 px-4 rounded-lg shadow-lg ${bgColor}`;
        toast.style.display = 'block';
        setTimeout(() => { toast.style.display = 'none'; }, 5000);
    }

    uploadForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        
        submitButton.disabled = true;
        buttonText.textContent = 'Procesando...';
        buttonIcon.classList.add('hidden');
        spinner.classList.remove('hidden');
        
        const formData = new FormData();
        for (const file of fileInput.files) {
            formData.append('files[]', file);
        }

        try {
            const response = await fetch("{{ url_for('upload_file') }}", { method: 'POST', body: formData });
            const result = await response.json();
            
            if (response.ok) {
                showToast(result.message, result.status);
                if (result.status === 'success') {
                    setTimeout(() => { window.location.href = "{{ url_for('analyzer_app') }}"; }, 1500);
                } else {
                    submitButton.disabled = false;
                    buttonText.textContent = 'Cargar y Procesar';
                    buttonIcon.classList.remove('hidden');
                    spinner.classList.add('hidden');
                }
            } else {
                throw new Error(result.error || 'Error en el servidor.');
            }
        } catch (error) {
            showToast(error.message, 'error');
            submitButton.disabled = false;
            buttonText.textContent = 'Cargar y Procesar';
            buttonIcon.classList.remove('hidden');
            spinner.classList.add('hidden');
        }
    });
</script>
{% endblock %}
EOF
echo "  -> templates/timeline_app_upload.html creado."

# Crear la plantilla del visor de PDF
cat > app/templates/viewer.html << 'EOF'
{% extends "layout.html" %}
{% block title %}Visor de PDF{% endblock %}
{% block head %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.102/pdf.min.js"></script>
    <style> #pdf-container canvas { box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); border-radius: 8px; margin-bottom: 2rem; } </style>
{% endblock %}
{% block content %}
<div class="container mx-auto">
    <header class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-900">Visor de PDF</h1>
        <p class="text-lg text-gray-600 mt-2">Selecciona un archivo PDF de tu dispositivo para visualizarlo aquí mismo.</p>
    </header>
    <div class="max-w-md mx-auto bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-8">
        <label for="pdf-file" class="block text-sm font-medium text-gray-700 mb-2">Elegir archivo PDF</label>
        <input type="file" id="pdf-file" accept=".pdf" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 cursor-pointer"/>
    </div>
    <div id="pdf-viewer" class="flex flex-col items-center">
        <div id="loading-message" class="hidden text-lg font-semibold text-gray-700">Cargando PDF...</div>
        <div id="pdf-container"></div>
        <div id="error-message" class="hidden text-red-600 font-medium mt-4"></div>
    </div>
</div>
<script>
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.102/pdf.worker.min.js';
    document.getElementById('pdf-file').addEventListener('change', (e) => {
        const file = e.target.files[0];
        const pdfContainer = document.getElementById('pdf-container');
        const errorMessage = document.getElementById('error-message');
        const loadingMessage = document.getElementById('loading-message');
        if (file && file.type === 'application/pdf') {
            const fileReader = new FileReader();
            fileReader.onload = async function() {
                pdfContainer.innerHTML = '';
                errorMessage.classList.add('hidden');
                loadingMessage.classList.remove('hidden');
                try {
                    const pdf = await pdfjsLib.getDocument({ data: new Uint8Array(this.result) }).promise;
                    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
                        const page = await pdf.getPage(pageNum);
                        const viewport = page.getViewport({ scale: 1.5 });
                        const canvas = document.createElement('canvas');
                        canvas.height = viewport.height; canvas.width = viewport.width;
                        canvas.classList.add('max-w-full', 'h-auto');
                        pdfContainer.appendChild(canvas);
                        await page.render({ canvasContext: canvas.getContext('2d'), viewport: viewport }).promise;
                    }
                } catch (error) {
                    pdfContainer.innerHTML = '';
                    errorMessage.textContent = 'Fallo al renderizar el PDF.';
                    errorMessage.classList.remove('hidden');
                } finally {
                    loadingMessage.classList.add('hidden');
                }
            };
            fileReader.readAsArrayBuffer(file);
        } else {
            pdfContainer.innerHTML = '';
            errorMessage.textContent = 'Por favor, selecciona un archivo PDF válido.';
            errorMessage.classList.remove('hidden');
        }
    });
</script>
{% endblock %}
EOF
echo "  -> templates/viewer.html creado."

# Crear la plantilla del analizador
cat > app/templates/analyzer.html << 'EOF'
{% extends "layout.html" %}
{% block title %}Analizador Interactivo{% endblock %}
{% block head %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.4.4/build/global/luxon.min.js"></script>
{% endblock %}
{% block content %}
<div class="container mx-auto">
    <div id="loader" class="fixed inset-0 bg-white bg-opacity-75 flex justify-center items-center z-50">
        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
    </div>
    
    <div id="content" class="hidden">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Analizador Interactivo de Datos</h1>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200">
                <h2 class="text-xl font-semibold mb-4">Top 10 Llamadas</h2>
                <div class="h-80"><canvas id="callsChart"></canvas></div>
            </div>
            <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200">
                <h2 class="text-xl font-semibold mb-4">Top 10 Mensajes</h2>
                <div class="h-80"><canvas id="messagesChart"></canvas></div>
            </div>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200">
            <div class="flex flex-wrap items-center justify-between mb-4 gap-4">
                <h2 class="text-xl font-semibold">Historial Cronológico Completo</h2>
                <div class="flex items-center gap-4">
                    <input type="text" id="quick-filter" placeholder="Búsqueda rápida..." class="px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <button id="export-csv" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md flex items-center gap-2">
                        <i data-lucide="download"></i> Exportar CSV
                    </button>
                </div>
            </div>
            <div id="data-grid" class="ag-theme-alpine" style="height: 600px; width: 100%;"></div>
        </div>
    </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', async function () {
    const gridDiv = document.querySelector('#data-grid');
    let gridApi;

    const gridOptions = {
        columnDefs: [
            { headerName: "Tipo", field: "type", width: 120, filter: true, cellStyle: params => {
                if (params.value === 'Llamada') return { color: 'white', backgroundColor: '#3B82F6' };
                if (params.value === 'Mensaje') return { color: 'white', backgroundColor: '#10B981' };
                if (params.value === 'Datos') return { color: 'white', backgroundColor: '#F97316' };
                return null;
            }},
            { headerName: "Fecha y Hora", field: "timestamp", width: 200, filter: 'agDateColumnFilter', sort: 'desc', valueFormatter: params => params.value ? luxon.DateTime.fromISO(params.value).toFormat('yyyy-MM-dd HH:mm:ss') : '' },
            { headerName: "Detalle 1", field: "detail1", flex: 1, filter: true },
            { headerName: "Detalle 2", field: "detail2", flex: 1, filter: true },
            { headerName: "Detalle 3", field: "detail3", flex: 1 },
            { headerName: "Archivo Origen", field: "source_file", width: 150, filter: true },
        ],
        rowData: [],
        pagination: true,
        paginationPageSize: 100,
        defaultColDef: {
            sortable: true,
            resizable: true,
            filter: true,
            floatingFilter: true,
        }
    };
    
    gridApi = agGrid.createGrid(gridDiv, gridOptions);

    document.getElementById('quick-filter').addEventListener('input', (e) => gridApi.setQuickFilter(e.target.value));
    document.getElementById('export-csv').addEventListener('click', () => gridApi.exportDataAsCsv());
    
    async function fetchData() {
        try {
            const [dataResponse, summaryResponse] = await Promise.all([
                fetch("{{ url_for('get_data') }}"),
                fetch("{{ url_for('get_summary') }}")
            ]);
            if (!dataResponse.ok || !summaryResponse.ok) throw new Error('La respuesta de la red no fue correcta');
            
            const data = await dataResponse.json();
            const summary = await summaryResponse.json();
            
            const timelineData = [
                ...data.calls.map(c => ({ type: 'Llamada', timestamp: c.timestamp, detail1: `Tipo: ${c.call_type}`, detail2: `Número: ${c.phone_number}`, detail3: `Duración: ${c.duration_minutes} min`, source_file: c.source_file })),
                ...data.messages.map(m => ({ type: 'Mensaje', timestamp: m.timestamp, detail1: `Tipo: ${m.message_type}`, detail2: `Contacto: ${m.contact}`, detail3: `Formato: ${m.format}`, source_file: m.source_file })),
                ...data.data_usage.map(d => ({ type: 'Datos', timestamp: d.date, detail1: `Uso: ${d.mb_used.toFixed(2)} MB`, detail2: '', detail3: '', source_file: d.source_file }))
            ].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            gridApi.setRowData(timelineData);
            
            createChart('callsChart', 'Llamadas', summary.top_calls.map(c => c.number), summary.top_calls.map(c => c.count), '#60A5FA');
            createChart('messagesChart', 'Mensajes', summary.top_messages.map(m => m.contact), summary.top_messages.map(m => m.count), '#34D399');

        } catch (error) { console.error('Fallo al obtener los datos:', error); } 
        finally {
            document.getElementById('loader').style.display = 'none';
            document.getElementById('content').classList.remove('hidden');
            lucide.createIcons();
        }
    }
    function createChart(id, label, labels, data, color) {
        new Chart(document.getElementById(id).getContext('2d'), {
            type: 'bar', data: { labels, datasets: [{ label, data, backgroundColor: color, borderRadius: 4 }] },
            options: { responsive: true, maintainAspectRatio: false, indexAxis: 'y', plugins: { legend: { display: false } } }
        });
    }
    fetchData();
});
</script>
{% endblock %}
EOF
echo "  -> templates/analyzer.html creado."

# Crear la plantilla de estado vacío del analizador
cat > app/templates/analyzer_empty.html << 'EOF'
{% extends "layout.html" %}
{% block title %}Analizador de Datos Vacío{% endblock %}
{% block content %}
<div class="container mx-auto text-center">
    <div class="max-w-2xl mx-auto bg-white p-10 rounded-xl shadow-md border border-gray-200 mt-10">
        <i data-lucide="database-zap" class="mx-auto h-20 w-20 text-indigo-400"></i>
        <h1 class="text-3xl font-bold text-gray-800 mt-6">No hay datos para analizar</h1>
        <p class="text-gray-600 mt-2">Parece que todavía no has procesado ningún archivo PDF. ¡Empecemos!</p>
        <a href="{{ url_for('timeline_app') }}" class="mt-6 inline-flex items-center gap-2 bg-indigo-600 text-white py-3 px-6 rounded-md hover:bg-indigo-700 transition-colors">
            <i data-lucide="upload-cloud"></i>
            Ir a Cargar Archivos
        </a>
    </div>
</div>
{% endblock %}
EOF
echo "  -> templates/analyzer_empty.html creado."

# Crear la plantilla de notas con IA
cat > app/templates/notes.html << 'EOF'
{% extends "layout.html" %}
{% block title %}Notas con IA{% endblock %}
{% block head %}
    <style>
        .loader { border: 2px solid #f3f3f3; border-top: 2px solid #4f46e5; border-radius: 50%; width: 18px; height: 18px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
{% endblock %}
{% block content %}
<div class="max-w-4xl mx-auto">
    <header class="text-center mb-8">
        <h1 class="text-4xl md:text-5xl font-bold text-indigo-600">Notas con IA</h1>
        <p class="text-gray-600 mt-2">Guarda tus pensamientos y mejóralos con la asistencia de la IA. Tu nota se guardará automáticamente.</p>
    </header>
    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200">
        <textarea id="note-content" rows="12" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Escribe tu nota aquí..."></textarea>
        
        <div class="mt-4 flex justify-between items-center">
             <div id="ai-buttons" class="grid grid-cols-2 md:grid-cols-4 gap-3">
                <button data-action="summarize" class="ai-btn flex justify-center items-center gap-2 w-full bg-indigo-500 text-white py-2 px-4 rounded-md hover:bg-indigo-600"><i data-lucide="align-justify"></i> Resumir</button>
                <button data-action="continue" class="ai-btn flex justify-center items-center gap-2 w-full bg-indigo-500 text-white py-2 px-4 rounded-md hover:bg-indigo-600"><i data-lucide="text-cursor-input"></i> Continuar</button>
                <button data-action="fix" class="ai-btn flex justify-center items-center gap-2 w-full bg-indigo-500 text-white py-2 px-4 rounded-md hover:bg-indigo-600"><i data-lucide="sparkles"></i> Corregir</button>
                <button data-action="actions" class="ai-btn flex justify-center items-center gap-2 w-full bg-indigo-500 text-white py-2 px-4 rounded-md hover:bg-indigo-600"><i data-lucide="list-checks"></i> Acciones</button>
            </div>
             <button id="clear-note" class="text-sm text-red-500 hover:text-red-700 flex items-center gap-1"><i data-lucide="trash-2" class="h-4 w-4"></i> Limpiar</button>
        </div>
       
        <div id="ai-result-box" class="mt-6 p-4 bg-gray-50 rounded-md border border-gray-200 hidden">
             <h3 class="font-semibold text-lg mb-2 text-gray-800">Resultado de la IA:</h3>
             <div id="ai-result-content" class="prose max-w-none text-gray-700"></div>
        </div>
    </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const noteTextarea = document.getElementById('note-content');
    const resultBox = document.getElementById('ai-result-box');
    const resultContent = document.getElementById('ai-result-content');
    const clearButton = document.getElementById('clear-note');
    const NOTE_STORAGE_KEY = 'aiNoteContent';

    const savedNote = localStorage.getItem(NOTE_STORAGE_KEY);
    if (savedNote) {
        noteTextarea.value = savedNote;
    }

    noteTextarea.addEventListener('input', () => {
        localStorage.setItem(NOTE_STORAGE_KEY, noteTextarea.value);
    });
    
    clearButton.addEventListener('click', () => {
        noteTextarea.value = '';
        localStorage.removeItem(NOTE_STORAGE_KEY);
        resultBox.classList.add('hidden');
    });

    document.querySelectorAll('.ai-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const currentButton = e.currentTarget;
            const action = currentButton.dataset.action;
            const content = noteTextarea.value.trim();
            if (!content) { alert("Por favor, escribe algo en la nota."); return; }

            const prompts = {
                summarize: `Resume el siguiente texto:\n\n${content}`,
                continue: `Continúa escribiendo a partir del siguiente texto:\n\n${content}`,
                fix: `Corrige la gramática y ortografía del siguiente texto. Devuelve solo el texto corregido sin añadir explicaciones:\n\n${content}`,
                actions: `Extrae una lista de puntos de acción o tareas del siguiente texto:\n\n${content}`
            };

            const originalHTML = currentButton.innerHTML;
            currentButton.innerHTML = '<div class="loader"></div>';
            currentButton.disabled = true;

            try {
                const response = await fetch("{{ url_for('gemini_proxy') }}", {
                    method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({ prompt: prompts[action] })
                });
                const result = await response.json();
                if (response.ok) {
                    if (action === 'fix' || action === 'continue') {
                        noteTextarea.value = action === 'continue' ? `${content}\n\n${result.text}` : result.text;
                        localStorage.setItem(NOTE_STORAGE_KEY, noteTextarea.value);
                        resultBox.classList.add('hidden');
                    } else {
                        resultContent.innerHTML = result.text.replace(/\\n/g, '<br>').replace(/\*/g, '• ');
                        resultBox.classList.remove('hidden');
                    }
                } else { throw new Error(result.error); }
            } catch (error) {
                resultContent.textContent = `Error: ${error.message}`;
                resultBox.classList.remove('hidden');
            } finally {
                currentButton.innerHTML = originalHTML;
                currentButton.disabled = false;
            }
        });
    });
});
</script>
{% endblock %}
EOF
echo "  -> templates/notes.html creado."
echo "✅ Todas las plantillas HTML han sido creadas."
echo ""
echo "------------------------------------------------------------------"
echo "✅ ¡PROCESO COMPLETADO!"
echo "La aplicación v3, robusta y documentada, está lista."
echo ""
echo "➡️ PRÓXIMOS PASOS:"
echo "1. Lee el nuevo archivo 'README.md' para entender el proyecto a fondo."
echo "2. Ve a la pestaña 'Secrets' (icono de 🔒 a la izquierda) y configura tu 'GOOGLE_API_KEY'."
echo "3. Presiona el botón verde 'Run' en la parte superior para iniciar la aplicación."
echo "------------------------------------------------------------------"