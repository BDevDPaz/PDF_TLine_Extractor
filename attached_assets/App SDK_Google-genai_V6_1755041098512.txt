#!/bin/bash
# Script Completo de Creación de Aplicación (v6) - Con Extracción Inteligente y Chat
# Utiliza la SDK google-genai, JSON Schema para una extracción robusta y una nueva herramienta de Chat.

echo "Iniciando la construcción de la aplicación con IA avanzada (v6)..."
echo "------------------------------------------------------------------"

# --- 1. Estructura de Directorios ---
echo "PASO 1: Creando estructura de directorios..."
mkdir -p app/db app/static/js app/templates data/raw
echo "✅ Estructura de directorios creada."
echo ""

# --- 2. Archivos de Configuración y Dependencias ---
echo "PASO 2: Creando archivos de configuración..."

cat > .replit << 'EOF'
run = "poetry install && python main.py"
language = "python3"
[packager]
language = "python3"
[packager.features]
packageSearch = true
guessImports = true
EOF
echo "  -> .replit creado."

cat > pyproject.toml << 'EOF'
[tool.poetry]
name = "pdf-analyzer-app-v6"
version = "6.0.0"
description = "Aplicación final con extracción inteligente (JSON Schema) y chat con datos."
authors = ["Coding Partner"]
[tool.poetry.dependencies]
python = ">=3.8"
Flask = "^2.2.0"
SQLAlchemy = "^1.4.0"
pdfplumber = "^0.10.0"
pandas = "^1.5.0"
python-dateutil = "^2.8.0"
werkzeug = "^2.2.0"
google-genai = "^0.5.0"  # Usando la nueva y potente SDK
pydantic = "^2.7.0"      # Necesario para los esquemas JSON
[tool.poetry.dev-dependencies]
pytest = "^7.0"
black = "^23.0"
EOF
echo "  -> pyproject.toml actualizado con google-genai."
echo "✅ Archivos de configuración creados."
echo ""

# --- 3. Aplicación Python con IA Avanzada ---
echo "PASO 3: Creando la aplicación Python con IA avanzada..."
touch app/__init__.py app/db/__init__.py app/static/js/__init__.py

# Módulos de la base de datos (sin cambios)
cat > app/db/database.py << 'EOF'
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
DATABASE_URL = "sqlite:///data/app_data.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()
def init_db(): Base.metadata.create_all(bind=engine)
EOF
echo "  -> db/database.py creado."

cat > app/db/models.py << 'EOF'
from sqlalchemy import Column, Integer, String, DateTime, Float
from app.db.database import Base
class ExtractedData(Base):
    __tablename__ = "extracted_data"
    id = Column(Integer, primary_key=True, index=True)
    source_file = Column(String, index=True)
    phone_line = Column(String, index=True)
    event_type = Column(String, index=True)
    timestamp = Column(DateTime, index=True)
    direction = Column(String)
    contact = Column(String)
    description = Column(String)
    value = Column(String)
EOF
echo "  -> db/models.py creado."

# Módulo de Chat IA
cat > app/ai_chat.py << 'EOF'
import os
import pandas as pd
from google import genai
from app.db.database import SessionLocal
from app.db.models import ExtractedData

def get_chat_response(user_prompt: str, history: list):
    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    model = genai.GenerativeModel('gemini-1.5-flash')

    # Obtener los datos de la base de datos como contexto
    db = SessionLocal()
    try:
        query = db.query(ExtractedData)
        df = pd.read_sql(query.statement, query.session.bind)
        if df.empty:
            context = "No hay datos extraídos en la base de datos todavía."
        else:
            context = df.to_string()
    finally:
        db.close()

    system_instruction = f"""
    Eres un analista de datos experto en facturas de telecomunicaciones.
    Tu tarea es responder preguntas del usuario basándote únicamente en los siguientes datos extraídos.
    No inventes información. Si la respuesta no está en los datos, dilo claramente.
    Aquí están los datos:
    ---
    {context}
    ---
    """
    
    # Construir el historial de conversación para la API
    messages = [{"role": "system", "parts": [system_instruction]}]
    for item in history:
        messages.append({"role": item["role"], "parts": [item["parts"][0]]})
    messages.append({"role": "user", "parts": [user_prompt]})
    
    response = model.generate_content(messages)
    return response.text
EOF
echo "  -> ai_chat.py (nuevo módulo de chat) creado."

# Módulo de Extracción Inteligente
cat > app/ai_processor.py << 'EOF'
import os
import pdfplumber
from typing import List, Optional
from pydantic import BaseModel, Field
from google import genai
from app.db.database import SessionLocal
from app.db.models import ExtractedData

# --- Definir la Plantilla/Esquema de Datos con Pydantic ---
class CallRecord(BaseModel):
    phone_line: str = Field(description="La línea telefónica que realizó o recibió la llamada, ej: (818) 466-3558")
    timestamp_str: str = Field(description="La fecha y hora de la llamada, ej: 'Jun 16 6:16 PM'")
    direction: str = Field(description="La dirección de la llamada, 'IN' o 'OUT'")
    contact_number: str = Field(description="El número de teléfono al que se llamó o del que se recibió la llamada")
    description: str = Field(description="El destino o descripción de la llamada, ej: to Canogapark/CA")
    minutes: int = Field(description="La duración de la llamada en minutos")

class MessageRecord(BaseModel):
    phone_line: str = Field(description="La línea telefónica que envió o recibió el mensaje")
    timestamp_str: str = Field(description="La fecha y hora del mensaje, ej: 'Jun 16 4:27 PM'")
    direction: str = Field(description="La dirección del mensaje, 'IN' o 'OUT'")
    contact: str = Field(description="El número o contacto del mensaje")
    format: str = Field(description="El formato del mensaje, 'TXT' o 'PIC'")

class DataUsageRecord(BaseModel):
    phone_line: str = Field(description="La línea telefónica que usó los datos")
    date_str: str = Field(description="La fecha del uso de datos, ej: 'Jun 16'")
    megabytes_used: float = Field(description="La cantidad de datos usados en MB, ej: 2517.5465")

class BillingData(BaseModel):
    calls: List[CallRecord]
    messages: List[MessageRecord]
    data_usage: List[DataUsageRecord]

# --- Función de Extracción con IA ---
def extract_data_with_ai(filepath: str, pages_to_process: list[int]):
    from dateutil.parser import parse

    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    model = genai.GenerativeModel(model_name='gemini-1.5-flash')

    filename = os.path.basename(filepath)
    full_text = ""
    with pdfplumber.open(filepath) as pdf:
        for page_num in pages_to_process:
            if page_num > len(pdf.pages): continue
            page = pdf.pages[page_num - 1]
            text = page.extract_text()
            if text: full_text += f"\n--- Contenido de Página {page_num} ---\n{text}"

    if not full_text: return 0

    prompt = f"Analiza el siguiente texto de una factura de T-Mobile y extrae TODAS las llamadas (TALK), mensajes (TEXT) y registros de uso de datos (DATA). Presta especial atención a qué línea telefónica pertenece cada registro. Formatea tu respuesta estrictamente como un objeto JSON que siga el esquema proporcionado. Texto de la factura:\n\n{full_text}"
    
    response = model.generate_content(
        contents=prompt,
        generation_config={
            "response_mime_type": "application/json",
            "response_schema": BillingData.model_json_schema()
        }
    )
    
    extracted = BillingData.model_validate_json(response.text)
    
    all_records = []
    current_year = "2024"

    for call in extracted.calls:
        all_records.append(ExtractedData(
            source_file=filename, phone_line=call.phone_line, event_type='Llamada',
            timestamp=parse(f"{call.timestamp_str}, {current_year}"), direction=call.direction,
            contact=call.contact_number, description=call.description, value=f"{call.minutes} min"
        ))
    for msg in extracted.messages:
         all_records.append(ExtractedData(
            source_file=filename, phone_line=msg.phone_line, event_type='Mensaje',
            timestamp=parse(f"{msg.timestamp_str}, {current_year}"), direction=msg.direction,
            contact=msg.contact, description=None, value=msg.format
        ))
    for data in extracted.data_usage:
         all_records.append(ExtractedData(
            source_file=filename, phone_line=data.phone_line, event_type='Datos',
            timestamp=parse(f"{data.date_str}, {current_year}"), direction=None,
            contact=None, description="Uso de datos", value=f"{data.megabytes_used:.2f} MB"
        ))

    db = SessionLocal()
    try:
        db.query(ExtractedData).filter(ExtractedData.source_file == filename).delete()
        db.add_all(all_records)
        db.commit()
        return len(all_records)
    finally:
        db.close()
EOF
echo "  -> ai_processor.py (nuevo extractor inteligente) creado."

# Controlador principal
cat > main.py << 'EOF'
import os
import pandas as pd
from flask import Flask, render_template, request, jsonify, send_from_directory, Response
from werkzeug.utils import secure_filename
from app.db.database import init_db, SessionLocal
from app.db.models import ExtractedData
from app.ai_processor import extract_data_with_ai
from app.ai_chat import get_chat_response

app = Flask(__name__, template_folder='app/templates', static_folder='app/static')
app.config['UPLOAD_FOLDER'] = 'data/raw'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
init_db()

@app.route('/')
def index(): return render_template('index.html')

@app.route('/api/upload', methods=['POST'])
def upload_file():
    if 'pdfFile' not in request.files: return jsonify({'error': 'No se encontró el archivo'}), 400
    file = request.files['pdfFile']
    if not file or file.filename == '': return jsonify({'error': 'No se seleccionó archivo'}), 400
    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)
    return jsonify({'message': 'Archivo subido con éxito', 'filename': filename})

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/api/process', methods=['POST'])
def process_file():
    if not os.getenv("GOOGLE_API_KEY"): return jsonify({"error": "La API Key de Google no está configurada en los Secrets."}), 500
    data = request.json
    filename, pages = data.get('filename'), data.get('pages')
    if not filename or not pages: return jsonify({'error': 'Faltan datos para procesar'}), 400
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    if not os.path.exists(filepath): return jsonify({'error': 'Archivo no encontrado'}), 404
    try:
        count = extract_data_with_ai(filepath, pages)
        if count > 0:
            return jsonify({'message': f'Éxito: La IA extrajo {count} registros.'})
        else:
            return jsonify({'message': 'La IA completó el proceso pero no encontró datos estructurados que extraer.'})
    except Exception as e:
        return jsonify({'error': f'Error en la IA: {str(e)}'}), 500

@app.route('/api/chat', methods=['POST'])
def chat_handler():
    if not os.getenv("GOOGLE_API_KEY"): return jsonify({"error": "La API Key de Google no está configurada en los Secrets."}), 500
    data = request.json
    user_prompt, history = data.get('prompt'), data.get('history', [])
    if not user_prompt: return jsonify({'error': 'El prompt está vacío'}), 400
    try:
        response_text = get_chat_response(user_prompt, history)
        return jsonify({'response': response_text})
    except Exception as e:
        return jsonify({'error': f'Error en la IA: {str(e)}'}), 500

@app.route('/api/get-data')
def get_data():
    db = SessionLocal()
    try:
        data = db.query(ExtractedData).all()
        return jsonify([item.__dict__ for item in data])
    finally:
        db.close()

@app.route('/api/export-csv')
def export_csv():
    db = SessionLocal()
    try:
        df = pd.read_sql(db.query(ExtractedData).statement, db.bind)
        if 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
        return Response(df.to_csv(index=False), mimetype="text/csv", headers={"Content-disposition": "attachment; filename=reporte.csv"})
    finally:
        db.close()

if __name__ == '__main__': app.run(host='0.0.0.0', port=8080)
EOF
echo "  -> main.py creado."
echo "✅ Aplicación Python creada."
echo ""

# --- 4. Plantilla HTML y JS Finales ---
echo "PASO 4: Creando la plantilla HTML y el JS final..."
cat > app/templates/index.html << 'EOF'
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analizador PDF v6</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/build/pdf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style> body { font-family: 'Inter', sans-serif; background-color: #e5e7eb; } .nav-item.active { color: #4f46e5; border-top-color: #4f46e5; } .main-content { padding-bottom: 80px; } </style>
</head>
<body class="h-screen flex flex-col">
    <header class="bg-white shadow-md text-center p-4"><h1 class="text-2xl font-bold text-gray-800">Analizador Inteligente de Facturas</h1></header>
    <main id="main-content" class="flex-grow p-4 overflow-y-auto">
        <div id="upload-view" class="view-content">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 flex items-center gap-2"><i data-lucide="upload"></i>Cargar y Visualizar PDF</h2>
                <input type="file" id="pdf-input" accept=".pdf" class="mb-4 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"/>
                <div id="viewer-container" class="hidden">
                    <div id="viewer-controls" class="flex items-center justify-between bg-gray-100 p-2 rounded-md mb-2">
                        <div>
                            <button id="prev-page" class="p-2 rounded-md hover:bg-gray-200"><i data-lucide="arrow-left"></i></button>
                            <span id="page-num"></span> / <span id="page-count"></span>
                            <button id="next-page" class="p-2 rounded-md hover:bg-gray-200"><i data-lucide="arrow-right"></i></button>
                        </div>
                        <label class="flex items-center gap-2 font-medium"><input type="checkbox" id="include-page-checkbox"> Incluir esta página</label>
                    </div>
                    <canvas id="pdf-canvas" class="border rounded-md w-full"></canvas>
                    <button id="process-button" class="mt-4 w-full bg-blue-600 text-white py-3 rounded-lg flex items-center justify-center gap-2 hover:bg-blue-700 disabled:bg-gray-400">
                        <i data-lucide="sparkles"></i> <span id="process-button-text">Procesar con IA</span></button>
                    <div id="status-message" class="mt-2 text-center"></div>
                </div>
            </div>
        </div>
        <div id="analyze-view" class="view-content hidden">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 flex items-center gap-2"><i data-lucide="table-2"></i>Tabla de Datos</h2>
                <input type="text" id="quick-filter" placeholder="Búsqueda rápida..." class="w-full p-2 border rounded-md mb-4">
                <div id="data-grid" class="ag-theme-alpine" style="height: 60vh; width: 100%;"></div>
            </div>
        </div>
        <div id="chat-view" class="view-content hidden">
            <div class="bg-white p-6 rounded-lg shadow-md h-full flex flex-col">
                <h2 class="text-xl font-semibold mb-4 flex items-center gap-2"><i data-lucide="message-circle"></i>Analista IA</h2>
                <div id="chat-window" class="flex-grow border rounded-md p-4 overflow-y-auto bg-gray-50 mb-4"></div>
                <div class="flex gap-2">
                    <input type="text" id="chat-input" placeholder="Pregúntale algo a tus datos..." class="flex-grow p-2 border rounded-md">
                    <button id="send-chat-button" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"><i data-lucide="send"></i></button>
                </div>
            </div>
        </div>
        <div id="export-view" class="view-content hidden">
             <div class="bg-white p-6 rounded-lg shadow-md text-center">
                <h2 class="text-xl font-semibold mb-4 flex items-center justify-center gap-2"><i data-lucide="file-down"></i>Exportar Datos</h2>
                <p class="mb-4 text-gray-600">Exporta todos los datos extraídos a un archivo CSV.</p>
                <button id="export-csv" class="bg-green-600 text-white px-6 py-3 rounded-lg flex items-center justify-center gap-2 mx-auto hover:bg-green-700"><i data-lucide="download"></i> Descargar .CSV</button>
            </div>
        </div>
    </main>
    <nav class="fixed bottom-0 left-0 right-0 bg-white shadow-t flex justify-around border-t">
        <button data-view="upload-view" class="nav-item flex-1 p-4 text-center border-t-4 active"><i data-lucide="upload"></i><span class="block text-xs">Cargar</span></button>
        <button data-view="analyze-view" class="nav-item flex-1 p-4 text-center border-t-4 border-transparent"><i data-lucide="table-2"></i><span class="block text-xs">Datos</span></button>
        <button data-view="chat-view" class="nav-item flex-1 p-4 text-center border-t-4 border-transparent"><i data-lucide="bot"></i><span class="block text-xs">Analista IA</span></button>
        <button data-view="export-view" class="nav-item flex-1 p-4 text-center border-t-4 border-transparent"><i data-lucide="file-down"></i><span class="block text-xs">Exportar</span></button>
    </nav>
    <script src="/static/js/app.js"></script>
</body>
</html>
EOF
echo "✅ Plantilla HTML creada."

cat > app/static/js/app.js << 'EOF'
document.addEventListener('DOMContentLoaded', () => {
    let pdfDoc, currentPageNum = 1, pagesToInclude = new Set(), currentFilename, gridApi;
    const pdfInput = document.getElementById('pdf-input'), viewerContainer = document.getElementById('viewer-container'), canvas = document.getElementById('pdf-canvas'), pageNumEl = document.getElementById('page-num'), pageCountEl = document.getElementById('page-count'), prevPageBtn = document.getElementById('prev-page'), nextPageBtn = document.getElementById('next-page'), includeCheckbox = document.getElementById('include-page-checkbox'), processButton = document.getElementById('process-button'), statusMessage = document.getElementById('status-message'), navItems = document.querySelectorAll('.nav-item'), chatWindow = document.getElementById('chat-window'), chatInput = document.getElementById('chat-input'), sendChatButton = document.getElementById('send-chat-button');
    let chatHistory = [];

    pdfInput.addEventListener('change', handleFileSelect);
    prevPageBtn.addEventListener('click', onPrevPage);
    nextPageBtn.addEventListener('click', onNextPage);
    includeCheckbox.addEventListener('change', togglePageInclusion);
    processButton.addEventListener('click', processPDF);
    document.getElementById('export-csv').addEventListener('click', () => window.location.href = '/api/export-csv');
    navItems.forEach(item => item.addEventListener('click', handleNavClick));
    sendChatButton.addEventListener('click', handleSendMessage);
    chatInput.addEventListener('keypress', e => { if (e.key === 'Enter') handleSendMessage(); });

    async function handleFileSelect(e) {
        const file = e.target.files[0]; if (!file) return;
        setStatus('Subiendo y cargando PDF...', 'info');
        const formData = new FormData(); formData.append('pdfFile', file);
        try {
            const upload = await fetch('/api/upload', { method: 'POST', body: formData });
            const result = await upload.json(); if (!upload.ok) throw new Error(result.error);
            currentFilename = result.filename;
            pdfDoc = await pdfjsLib.getDocument(`/uploads/${currentFilename}`).promise;
            viewerContainer.classList.remove('hidden');
            pageCountEl.textContent = pdfDoc.numPages;
            pagesToInclude = new Set(Array.from({ length: pdfDoc.numPages }, (_, i) => i + 1));
            currentPageNum = 1;
            renderPage(currentPageNum);
            setStatus('PDF cargado. Selecciona páginas y procesa.', 'success');
        } catch (err) { setStatus(`Error: ${err.message}`, 'error'); }
    }
    function renderPage(num) {
        pdfDoc.getPage(num).then(page => {
            const viewport = page.getViewport({ scale: 1.5 });
            canvas.height = viewport.height; canvas.width = viewport.width;
            page.render({ canvasContext: canvas.getContext('2d'), viewport: viewport });
            pageNumEl.textContent = num;
            includeCheckbox.checked = pagesToInclude.has(num);
            prevPageBtn.disabled = num <= 1; nextPageBtn.disabled = num >= pdfDoc.numPages;
        });
    }
    function onPrevPage() { if (currentPageNum > 1) renderPage(--currentPageNum); }
    function onNextPage() { if (currentPageNum < pdfDoc.numPages) renderPage(++currentPageNum); }
    function togglePageInclusion() { pagesToInclude[includeCheckbox.checked ? 'add' : 'delete'](currentPageNum); }
    async function processPDF() {
        if (pagesToInclude.size === 0) { setStatus('Error: Debes incluir al menos una página.', 'error'); return; }
        processButton.disabled = true; setStatus('La IA está procesando, espera...', 'info');
        try {
            const res = await fetch('/api/process', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ filename: currentFilename, pages: Array.from(pagesToInclude) }) });
            const result = await res.json(); if (!res.ok) throw new Error(result.error);
            setStatus(result.message, 'success');
            loadDataIntoGrid();
        } catch (err) { setStatus(`Error: ${err.message}`, 'error'); } finally { processButton.disabled = false; }
    }
    function handleNavClick(e) {
        const viewId = e.currentTarget.dataset.view;
        document.querySelectorAll('.view-content').forEach(v => v.classList.add('hidden'));
        document.getElementById(viewId).classList.remove('hidden');
        navItems.forEach(n => n.classList.remove('active'));
        e.currentTarget.classList.add('active');
    }
    async function handleSendMessage() {
        const userPrompt = chatInput.value.trim(); if (!userPrompt) return;
        appendMessage(userPrompt, 'user'); chatInput.value = '';
        appendMessage('Analizando...', 'model', true);
        try {
            const res = await fetch('/api/chat', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ prompt: userPrompt, history: chatHistory }) });
            const result = await res.json(); if (!res.ok) throw new Error(result.error);
            document.getElementById('typing-indicator').remove();
            appendMessage(result.response, 'model');
        } catch (err) { document.getElementById('typing-indicator').remove(); appendMessage(`Error: ${err.message}`, 'model'); }
    }
    function appendMessage(text, role, isTyping = false) {
        const msgDiv = document.createElement('div');
        msgDiv.className = `p-2 my-1 rounded-lg ${role === 'user' ? 'bg-blue-100 self-end' : 'bg-gray-200 self-start'}`;
        msgDiv.textContent = text;
        if (isTyping) msgDiv.id = 'typing-indicator';
        chatWindow.appendChild(msgDiv); chatWindow.scrollTop = chatWindow.scrollHeight;
        if (!isTyping) chatHistory.push({ role, parts: [{text}] });
    }
    function initializeGrid() {
        const gridOptions = { columnDefs: [{ field: "phone_line", headerName: "Línea", filter: true, width: 150 }, { field: "event_type", headerName: "Tipo", filter: true, width: 120 }, { field: "timestamp", headerName: "Fecha", sort: 'desc', width: 180, valueFormatter: p => new Date(p.value).toLocaleString() }, { field: "direction", headerName: "Dirección", width: 100 }, { field: "contact", headerName: "Contacto", filter: true }, { field: "description", headerName: "Descripción", flex: 1 }, { field: "value", headerName: "Valor" }, { field: "source_file", headerName: "Archivo", filter: true }], defaultColDef: { sortable: true, resizable: true }, onGridReady: p => gridApi = p.api };
        new agGrid.Grid(document.getElementById('data-grid'), gridOptions);
        document.getElementById('quick-filter').addEventListener('input', e => gridApi.setQuickFilter(e.target.value));
    }
    async function loadDataIntoGrid() {
        if (!gridApi) initializeGrid();
        const data = await (await fetch('/api/get-data')).json();
        gridApi.setRowData(data);
    }
    lucide.createIcons();
    initializeGrid();
    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/build/pdf.worker.min.js`;
});
EOF
echo "✅ Archivo JavaScript creado."
echo ""

echo "------------------------------------------------------------------"
echo "✅ ¡PROCESO COMPLETADO! La aplicación v6 está lista."
echo ""
echo "➡️ PRÓXIMOS PASOS:"
echo "1. Ve a 'Secrets' (🔒) y configura tu 'GOOGLE_API_KEY'."
echo "2. Presiona el botón verde 'Run' para iniciar la aplicación."
echo "------------------------------------------------------------------"