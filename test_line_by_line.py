#!/usr/bin/env python3
"""
Test del extractor l√≠nea por l√≠nea ultra-preciso
"""

import sys
import os
sys.path.append('.')

from app.line_by_line_extractor import line_by_line_extractor
from app.db.database import SessionLocal
from app.db.models import ExtractedData
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_line_by_line_extraction():
    """Test del extractor l√≠nea por l√≠nea"""
    
    pdf_path = "data/raw/1BillSummaryJn_1755046685947.pdf"
    
    if not os.path.exists(pdf_path):
        logger.error(f"PDF no encontrado: {pdf_path}")
        return False
    
    logger.info("üéØ INICIANDO EXTRACCI√ìN L√çNEA POR L√çNEA ULTRA-PRECISA")
    logger.info("=" * 80)
    logger.info("BASADO EN: Capacidad de selecci√≥n individual mostrada en imagen")
    logger.info("M√âTODO: An√°lisis estructurado l√≠nea por l√≠nea")
    logger.info("OBJETIVO: Precisi√≥n total en cada registro individual")
    logger.info("=" * 80)
    
    try:
        # Ejecutar extracci√≥n l√≠nea por l√≠nea
        result = line_by_line_extractor.extract_with_line_precision(pdf_path, 'all')
        
        if result["success"]:
            records_count = result['records_processed']
            logger.info(f"‚úÖ EXTRACCI√ìN L√çNEA POR L√çNEA COMPLETADA: {records_count} registros")
            
            # An√°lisis detallado de resultados
            db = SessionLocal()
            try:
                records = db.query(ExtractedData).filter(
                    ExtractedData.source_file == "1BillSummaryJn_1755046685947.pdf"
                ).order_by(ExtractedData.timestamp).all()
                
                logger.info(f"\nüìä AN√ÅLISIS L√çNEA POR L√çNEA:")
                logger.info(f"Total registros procesados: {len(records)}")
                
                # An√°lisis por tipo de evento
                event_analysis = {}
                direction_analysis = {}
                contact_analysis = set()
                
                for record in records:
                    # Contar por tipo
                    event_analysis[record.event_type] = event_analysis.get(record.event_type, 0) + 1
                    
                    # Contar por direcci√≥n
                    direction_analysis[record.direction] = direction_analysis.get(record.direction, 0) + 1
                    
                    # Recopilar contactos √∫nicos
                    if record.contact and record.contact != "N/A" and len(record.contact) >= 10:
                        contact_analysis.add(record.contact)
                
                logger.info(f"\nüéØ AN√ÅLISIS POR TIPO DE EVENTO:")
                for event_type, count in sorted(event_analysis.items()):
                    logger.info(f"  {event_type}: {count} registros")
                
                logger.info(f"\nüîÑ AN√ÅLISIS POR DIRECCI√ìN:")
                for direction, count in sorted(direction_analysis.items()):
                    logger.info(f"  {direction}: {count} registros")
                
                logger.info(f"\nüìû CONTACTOS √öNICOS DETECTADOS:")
                for contact in sorted(contact_analysis):
                    logger.info(f"  {contact}")
                
                # Mostrar ejemplos de registros extra√≠dos
                logger.info(f"\nüìã PRIMEROS 15 REGISTROS EXTRA√çDOS:")
                for i, record in enumerate(records[:15]):
                    timestamp_str = record.timestamp.strftime('%Y-%m-%d %H:%M')
                    logger.info(f"  [{i+1:2}] {timestamp_str} | {record.event_type:8} | "
                              f"{record.direction:8} | {record.contact[:12]:12} | {record.value}")
                
                # Verificaci√≥n de calidad de datos
                logger.info(f"\nüîç VERIFICACI√ìN DE CALIDAD:")
                
                # Campos no nulos
                null_checks = {
                    'timestamp': sum(1 for r in records if r.timestamp is None),
                    'event_type': sum(1 for r in records if not r.event_type),
                    'direction': sum(1 for r in records if not r.direction),
                    'contact': sum(1 for r in records if not r.contact)
                }
                
                for field, null_count in null_checks.items():
                    status = "‚úÖ" if null_count == 0 else "‚ùå"
                    logger.info(f"  {status} {field}: {null_count} valores nulos")
                
                # Distribuci√≥n temporal
                if records:
                    earliest = min(r.timestamp for r in records if r.timestamp)
                    latest = max(r.timestamp for r in records if r.timestamp)
                    logger.info(f"  üìÖ Rango temporal: {earliest.strftime('%Y-%m-%d')} a {latest.strftime('%Y-%m-%d')}")
                
                # Evaluaci√≥n final
                expected_minimum = 372
                percentage = (len(records) / expected_minimum) * 100
                
                logger.info(f"\nüéØ EVALUACI√ìN FINAL L√çNEA POR L√çNEA:")
                logger.info(f"  Objetivo m√≠nimo: {expected_minimum} registros")
                logger.info(f"  Registros extra√≠dos: {len(records)}")
                logger.info(f"  Precisi√≥n: {percentage:.2f}%")
                
                if percentage >= 100:
                    logger.info("üèÜ ¬°EXTRACCI√ìN L√çNEA POR L√çNEA EXITOSA!")
                    logger.info("‚úÖ Objetivo 100% alcanzado con an√°lisis estructurado")
                    return True
                elif percentage >= 95:
                    logger.info("ü•á Excelente precisi√≥n con m√©todo l√≠nea por l√≠nea")
                    return True
                else:
                    missing = expected_minimum - len(records)
                    logger.warning(f"‚ö†Ô∏è  M√©todo l√≠nea por l√≠nea: Faltan {missing} registros")
                    return False
                
            finally:
                db.close()
                
        else:
            logger.error("‚ùå FALLO EN EXTRACCI√ìN L√çNEA POR L√çNEA")
            logger.error(f"Error: {result.get('error', 'Desconocido')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå ERROR CR√çTICO en l√≠nea por l√≠nea: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def compare_extraction_methods():
    """Comparar m√©todo l√≠nea por l√≠nea con h√≠brido ultra"""
    
    logger.info("\n" + "=" * 80)
    logger.info("üìä COMPARACI√ìN DE M√âTODOS DE EXTRACCI√ìN")
    logger.info("=" * 80)
    
    db = SessionLocal()
    try:
        # Contar registros por archivo fuente para comparar m√©todos
        files = db.query(ExtractedData.source_file).distinct().all()
        
        for file_tuple in files:
            filename = file_tuple[0]
            count = db.query(ExtractedData).filter(ExtractedData.source_file == filename).count()
            
            method = "Desconocido"
            if "1755046685947" in filename:
                method = "L√≠nea por l√≠nea / H√≠brido Ultra"
            
            logger.info(f"  {filename}: {count} registros ({method})")
        
        total_system_records = db.query(ExtractedData).count()
        logger.info(f"\nTotal en sistema: {total_system_records} registros")
        
    finally:
        db.close()

if __name__ == "__main__":
    logger.info("üöÄ TEST DEL EXTRACTOR L√çNEA POR L√çNEA")
    logger.info("Basado en la capacidad de selecci√≥n mostrada en la imagen")
    
    success = test_line_by_line_extraction()
    compare_extraction_methods()
    
    if success:
        logger.info("\n‚úÖ EXTRACCI√ìN L√çNEA POR L√çNEA VERIFICADA")
    else:
        logger.info("\n‚ö†Ô∏è  EXTRACCI√ìN L√çNEA POR L√çNEA REQUIERE AJUSTES")
    
    logger.info("=" * 80)